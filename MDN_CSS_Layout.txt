■CSS レイアウト https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout
★位置指定(position)https://developer.mozilla.org/ja/docs/Web/CSS/position
・position: relative; 元の位置に対して相対的（top,right,left,bottomで指定）
・position: absolute;　ビューポート（基本的にbody）に対して「相対」的。直近の親要素にposition: relativeを指定すると直近の親要素に対して「相対」的
・position: fixed; ビューポート（基本的にbody）に対して相対的。スクロールでも位置が変わらない
・position: sticky; スクロール途中で位置固定とかできる

■通常フロー　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Normal_Flow
デフォルトでは、ブロックレベル要素のコンテンツは、その親要素の幅の 100% で、そのコンテンツと同じ高さです インライン要素は、コンテンツと同じ高さで、コンテンツと同じ幅です。インライン要素に幅や高さを設定することはできません — それらはブロックレベル要素のコンテンツの中にあるだけです。この方法でインライン要素のサイズを制御したい場合は、display: block; を使用してブロックレベル要素のようにふるまうように設定する必要があります (あるいは、display: inline-block; で、両方の特性を混在させます)。


TODO: ■フレックスボックス https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Flexbox
★Flex(一次元:縦or横)
・display: flex;  親要素に指定することで配下の要素をflexitemとして扱える
・flex-direction: column, row ⇒ flexboxの要素の方向
・flex-wrap: wrap; 
flex-flow: row wrap; flex-directionとflex-wrapのショートハンド
・align-items: flex-end, center ⇒flexboxの位置
・。。。。

TODO: ■グリッド　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Grids
★Box(二次元:縦横)
・grid-template-rows 
・grid-template-columns
・grid-column 
・grid-row 

TODO: ■フロート(浮く)　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Floats
・仕組み　一番最初に見るべきくそ分かりやすい⇒https://www.youtube.com/watch?v=uRdGpA2jgWw
                                          もし消えてたら⇒"C:\develop\WHAT_IS\y2mate.com - 第18回CSSのfloatの仕組み実践プログラミング講座_480p.mp4"
・


TODO: ■位置指定　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Positioning

TODO: ■段組みレイアウト　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Multiple-column_Layout

■レスポンシブデザイン　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Responsive_Design
★いろんな手法がある
・フレキシブルレイアウト：javascriptでデバイスごとに読み込むCSSを変更する(古いやり方)
・max-widthを100%にしとく
・メディアクエリを使う
・gridで相対的なサイズを取得する
　⇒対象の列のサイズが 60 ピクセルで、コンテキスト（またはコンテナ）が 960 ピクセルの場合、60 を 960 で割る
　⇒.col {
 　　 width: 6.25%; /* 60 / 960 = 0.0625 */
　　}
・段組みレイアウト、フレックスボックス、グリッドなどの最新のレイアウト方法は、デフォルトでレスポンシブ
★レスポンシブ画像
・htmlの<picture> 要素と <img>の srcset 属性と size 属性を使用する


■メディアクエリーの初心者向けガイド　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Media_queries
・@media [not] {media-type} [and ({confition})] exaple: @media screen and (max-width: 600px)
・or条件はカンマ指定
・notで条件が反転する
★考え方的な
・現在、非常に多様なサイズのデバイスが多すぎて、それを実現できません。 つまり、すべてのデザインにおいて特定のサイズを対象にするのではなく、コンテンツが何らかの方法で壊れ始める（starts to break）サイズでデザインを変更することをお勧めします。
・アプローチのパターン
　⇒★★★モバイルファースト レスポンシブデザイン：最小のビューから初めて、ビューポートが大きくなるにつれてレイアウトを追加
　⇒デスクトップまたは最も広いビューから始めて、ビューポートが小さくなるにつれてレイアウトを追加
・※注意：メディアクエリを乱用するのではなく、flexboxやgridで同様のことが実現できないか検討するのが先

■過去のレイアウト方法　https://developer.mozilla.org/ja/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods
・あとで暇があったら

■