
・デザインの垂直分割（HTML,CSSとかの単位）と水平分割（コンポーネント単位）の話はよかった。
・ノーマライズCSS（ブラウザがHTMLタグについて標準で当てるCSS）について知れてよかった。
　⇒例えば、h1, h2とかは実はそれ自体にサイズが一番大きい、二番目に大きいなどのプロパティを持っているわけではなく、
　　ノーマライズCSSによってサイズが決められているだけ。
　　　⇒確かに考えてみるとHTMLは「文書の構造をマークアップ」するもので「スタイルを定義」しない。
https://qiita.com/arowM/items/e1af320e2755461649a0

Pxはあんまり使わず相対的なサイズを使う。emとか

SCSSは変数使えたり構造化できたりがめちゃくちゃいい @useとかも最高
⇒lessでもいいのではという気も。簡単そうだし
カスタムデータ属性の使い方
アニメーションはCSSでやる方がいいかもって
npm のpercelとかよさそう？webpackのいろいろ自動でやってくれる版



形式
selector {
    property: value;
}


■HTML要素におけるCSSの有効範囲はここが分かりやすい
https://www.tohoho-web.com/css/basic.htm#TagElementSelector

■適用の優先順位
https://www.tohoho-web.com/css/basic.htm#Priority
・基本的には、id, classが強くて、:とか::とかは弱い。要素指定(p,h1..)とかはかなり弱い
・同じ優先度だと、一つのCSS定義で単純にセレクタの数が多い方が優先度が高くなる。
・優先度の点数計算ができるようになるとちゃんと理解が進むかも
・ひとつの要素に相反するスタイルが指定された場合に計算される
　⇒継承関係にある場合は子要素のCSSが優先される？

■継承
親要素に指定されたスタイルの多くは、子要素に継承されます。
例えば、h1 { color: red; } と定義されている時、親要素である h1要素の color属性は、子要素である em要素に継承され、「いいい」の部分も赤くなります。
<h1>あああ<em>いいい</em>ううう</h1>

■CSSカスケードレイヤ
https://www.tohoho-web.com/ex/css-cascade-layers.html
CSS適用の優先度を変更できる。
CSSには優先度の計算方法があるが、それだと都合が悪いケースがあるので、この機能を使う。

https://hackr.io/
https://www.ideee.tech/about


■ブラウザのCSSの解析順
　セレクタを右から左に探していく（人間の感覚とは逆）
　セレクタの指定が増えるほど実行速度が遅くなる（4つ以上になるとだめ。3個まで）
　変に構造化するよりも、クラス名を複雑にして1クラスだけ指定する方がいいかも


アニメーションはこのへん？
https://www.tohoho-web.com/css/prop/transition.htm
animation-timing-function

HTMLスニペット？とかで調べればいい？
https://codepen.io/
https://jsfiddle.net/
